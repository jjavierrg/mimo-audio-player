name: Publish Docker image and deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
env:
  PORTAINER_URL: "https://docker.jgallego.es/api"

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        
      - name: Get current date # get the date of the build
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Log into registry
        run: docker login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build the Docker image
        if: success() && github.event_name != 'pull_request'
        run: docker build . --file Dockerfile --tag ${{ github.event.repository.name }}:${{ steps.date.outputs.date }} --tag ${{ github.event.repository.name }}:latest

      - name: Docker Push
        if: success() && github.event_name != 'pull_request'
        run: |
                docker tag ${{ github.event.repository.name }}:${{ steps.date.outputs.date }} ${{ secrets.DOCKER_REGISTRY }}/${{ github.event.repository.name }}:${{ steps.date.outputs.date }}
                docker tag ${{ github.event.repository.name }}:latest ${{ secrets.DOCKER_REGISTRY }}/${{ github.event.repository.name }}:latest
                docker push ${{ secrets.DOCKER_REGISTRY }}/${{ github.event.repository.name }} --all-tags
                
  replace_container:
    name: Replace container
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate
        id: authRequest
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ env.PORTAINER_URL }}/auth'
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json"}'
          data: '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}'
          
      - name: Show Response
        run: |
          echo ${{ steps.authRequest.outputs.response }}
          echo ${{ fromJson(steps.authRequest.outputs.response).jwt }}
